MODULE Geometry
  USE ModuleMat4, ONLY:Mat4
  IMPLICIT NONE
  
  REAL, PARAMETER :: PI        = 3.1415926
  REAL, PARAMETER :: PI2       = 2.0 * PI
  REAL, PARAMETER :: Degree180 = 180.0
  REAL, PARAMETER :: R_to_D    = Degree180/PI
  REAL, PARAMETER :: D_to_R    = PI/Degree180
  
  TYPE Geo
    TYPE(Mat4)                      :: mat4
    REAL,DIMENSION(:,:),ALLOCATABLE :: x
    REAL,DIMENSION(:),ALLOCATABLE   :: v
    REAL,DIMENSION(6)               :: bbox
    REAL,DIMENSION(3)               :: origin
    CONTAINS
      procedure :: Box_int
      procedure :: Box_array
      procedure :: Cylinder_int
      procedure :: Cylinder_array
      procedure :: Translate
      procedure :: TranslateNOORIGIN
      procedure :: Scale
      procedure :: Rotatex
      procedure :: Rotatey
      procedure :: Rotatez
      procedure :: Transform
      procedure :: Deallocate
      procedure :: ResetOrigin
      procedure :: getBbox
  END TYPE Geo
  
  CONTAINS
    PURE FUNCTION  degrees(r)
      IMPLICIT  NONE
      REAL, INTENT(IN) :: r
      REAL :: degrees
      degrees = r * R_to_D
    END FUNCTION  degrees
    
    PURE FUNCTION  radians(d)
      IMPLICIT  NONE
      REAL, INTENT(IN) :: d
      REAL :: radians
      radians = d * D_to_R
    END FUNCTION  radians
    
    SUBROUTINE ResetOrigin(this)
      CLASS(Geo),INTENT(INOUT) :: this
      this%origin=[0.,0.,0.]
    END SUBROUTINE
    
    SUBROUTINE Translate(this,x)
      CLASS(Geo),INTENT(INOUT) :: this
      REAL, DIMENSION(3),INTENT(in) :: x
      CALL this%mat4%Translate(x)
      CALL this%Transform()
      this%origin=x
    END SUBROUTINE
    
    SUBROUTINE TranslateNOORIGIN(this,x)
      CLASS(Geo),INTENT(INOUT) :: this
      REAL, DIMENSION(3),INTENT(in) :: x
      CALL this%mat4%Translate(x)
      CALL this%Transform()
     
    END SUBROUTINE
    
    SUBROUTINE Scale(this,x)
      CLASS(Geo),INTENT(INOUT) :: this
      REAL,INTENT(in)          :: x
      CALL this%TranslateNOORIGIN(-this%origin)
      CALL this%mat4%Scale([x,x,x])
      CALL this%Transform()
      CALL this%TranslateNOORIGIN(this%origin)
    END SUBROUTINE
    
    SUBROUTINE Rotatex(this,x)
      CLASS(Geo),INTENT(INOUT) :: this
       REAL,INTENT(in) :: x
      CALL this%mat4%Rotatex(x)
      CALL this%Transform()
    END SUBROUTINE
    
    SUBROUTINE Rotatey(this,x)
      CLASS(Geo),INTENT(INOUT) :: this
       REAL,INTENT(in) :: x
      CALL this%mat4%Rotatey(x)
      CALL this%Transform()
    END SUBROUTINE
    
    SUBROUTINE Rotatez(this,x)
      CLASS(Geo),INTENT(INOUT) :: this
       REAL,INTENT(in) :: x
      CALL this%mat4%Rotatez(x)
      CALL this%Transform()
    END SUBROUTINE
    
    SUBROUTINE Transform(this)
      CLASS(Geo),INTENT(INOUT) :: this
      CALL this%mat4%Transform(this%x)
      CALL this%mat4%Reset()
      CALL this%getBbox()
    END SUBROUTINE
    
    SUBROUTINE Box_int(this,iw,il,ih)
      CLASS(Geo) :: this
      INTEGER, INTENT(IN)      ::iw,il,ih
      REAL     :: w(iw),l(il),h(ih)
      INTEGER  :: i
      
      w=(/(0.0+(1.0*i/(iw-1.0)), i=0,iw-1)/)
      l=(/((0.0+(1.0*i/(il-1.0))),i=0,il-1)/)
      h=(/(0.0+(1.0*i/(ih-1.0)), i=0,ih-1)/)
      CALL Box_array(this,w,l,h)
    END SUBROUTINE
    
    SUBROUTINE Box_array(this,w,l,h)
      CLASS(Geo)                    :: this
      REAL, DIMENSION(:),INTENT(IN) :: w,l,h
      INTEGER                       :: I,J,K,C=1
      REAL                          :: vw,vl,vh
      
      ALLOCATE(this%x(size(w,1)*size(l,1)*size(h,1),3))
      ALLOCATE(this%v(size(w,1)*size(l,1)*size(h,1)))
      this%x = 0.0
      this%v = 0.0
    
      CALL this%mat4%Reset()
      
      DO I=1,size(w,1)
       DO J=1,size(l,1)
        DO K=1,size(h,1)
         this%x(C, 1) = w(I) 
         this%x(C, 2) = l(J)
         this%x(C, 3) = h(K)
         this%v(C) = dx(w,I)*dx(l,I)*dx(h,I)
         C = C + 1
        ENDDO
       ENDDO
      ENDDO
      
      ! Translate to centroid and reset Origin to 0,0,0
      CALL this%Translate([-MAXVAL(w)*0.5,-MAXVAL(l)*0.5,-MAXVAL(w)*0.5])
      CALL this%ResetOrigin()
    END SUBROUTINE
    
    SUBROUTINE Cylinder_int(this,ir,it,iz)
      CLASS(Geo)           :: this
      INTEGER, INTENT(in)  :: ir,it,iz
      REAL                 :: r(ir),t(it),z(iz)
      INTEGER              :: i
      
      r=(/((0.0+(1.0*i/(ir-1))),i=0,ir-1)/)
      t=(/(0.0+(radians(360.0)*i/it), i=0,it-1)/)
      z=(/(0.0+(1.0*i/(iz-1)), i=0,iz-1)/)
      CALL Cylinder_array(this,r,t,z)
    END SUBROUTINE
    
    SUBROUTINE Cylinder_array(this,r,t,z)
      CLASS(Geo)                    :: this
      REAL, DIMENSION(:),INTENT(IN) :: r,t,z ! radius, theta,z
      INTEGER                       :: I,J,K,C=1
      
      ALLOCATE(this%x(size(r,1)*size(t,1)*size(z,1),3))
      ALLOCATE(this%v(size(r,1)*size(t,1)*size(z,1)))
      this%x = 0.0
      this%v = 0.0

      CALL this%mat4%Reset()
      
      DO I=1,size(r,1)
        DO J=1,size(t,1)
          DO K=1,size(z,1)
          this%x(C, 1) = r(I) * COS(t(J))
          this%x(C, 2) = r(I) * SIN(t(J))
          this%x(C, 3) = z(K)
          this%v(C) = CylinderArea(r,t,I,J) * dx(z,K)
          C = C + 1
          ENDDO
        ENDDO
      ENDDO
      
      ! Translate to centroid and reset Origin to 0,0,0
      CALL this%Translate([0.,.0,-MAXVAL(z)*0.5])
      CALL this%ResetOrigin()
      
    END SUBROUTINE
    
    
    FUNCTION dx(x,i) result(b)
      REAL, DIMENSION(:) :: x
      INTEGER ::i
      REAL    :: b
      IF(I==1)THEN
        b=(x(I+1)-x(I))*0.5
      ELSEIF(I==size(x,1))THEN
        b=(x(I)-x(I-1))*0.5
      ELSE 
        b=(x(I+1)-x(I-1))*0.5
      ENDIF
    END FUNCTION
   
    FUNCTION CylinderArea(r,t,i,j) result(area)
      REAL, DIMENSION(:) :: r,t
      INTEGER :: i,j
      REAL    :: radiusO,radiusI,dr,theta,area
      IF(I==1)THEN
        radiusO=r(i+1)
        radiusI=r(i)
        theta=t(j+1)-t(j)
      ELSEIF(I==size(r,1))THEN
        radiusO=r(i)
        radiusI=r(i-1)
        theta=t(j)-t(j-1)
      ELSE 
        radiusO=r(i+1)
        radiusI=r(i-1)
        theta=t(j+1)-t(j-1)
      ENDIF
      theta=atan2(sin(theta), cos(theta))
      dr = radiusO-radiusI
      area=0.5*theta*(radiusI+radiusO)*dr
    END FUNCTION
    
    SUBROUTINE getBbox(this)
      CLASS(Geo)           :: this
      this%bbox(1)=MINVAL(this%x(:,1))
      this%bbox(2)=MINVAL(this%x(:,2))
      this%bbox(3)=MINVAL(this%x(:,3))
      this%bbox(4)=MAXVAL(this%x(:,1))
      this%bbox(5)=MAXVAL(this%x(:,2))
      this%bbox(6)=MAXVAL(this%x(:,3))
    END SUBROUTINE
    
    
    
    SUBROUTINE Deallocate(this)
      CLASS(Geo) :: this
      DEALLOCATE(this%x)
      DEALLOCATE(this%v)
    END SUBROUTINE
    
END MODULE GEOMETRY